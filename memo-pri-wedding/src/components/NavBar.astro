---
const navItems = [
  { name: 'Inicio', url: '#header' },
  { name: 'Nuestra Historia', url: '#love-story' },
  { name: 'Save the Date', url: '#save-the-date' },
  { name: 'Timeline', url: '#timeline' },
  { name: 'Asistencia', url: '#attendance' },
  { name: 'Cómo Llegar', url: '#how-to-arrive' },
  { name: 'Dress Code', url: '#dress-code' },
  { name: 'Alojamiento', url: '#accommodation' },
  { name: 'Consejos', url: '#tips' },
  { name: 'Regalo', url: '#gift' },
  { name: 'FAQ', url: '#faq' },
];
---

<nav class="bg-[#004AAD] shadow-md fixed w-full z-50 top-0 transition-all duration-300 ease-in-out" id="navbar">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-15">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="#header" class="-ml-4 text-2xl font-malone-clemettine font-bold text-white hover:text-blue-medium transition-colors flex items-center">
          <img src="/images/p_y_m_white.png" alt="M&P Logo" class="h-10 w-auto">
        </a>
      </div>

      <!-- Desktop Menu -->
      <div class="hidden md:hidden">
        <div class="ml-10 flex items-baseline space-x-6">
          {navItems.map((item) => (
            <a href={item.url} class="text-white hover:text-blue-medium transition-colors font-ibm-plex">
              {item.name}
            </a>
          ))}
        </div>
      </div>

      <!-- Mobile Menu Button -->
      <div class="-mr-2 flex">
        <button id="menu-toggle" class="text-white hover:text-blue-medium focus:outline-none p-2 -mr-2">
          <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div class="transition-all duration-300 ease-in-out overflow-hidden max-h-0 bg-[#004AAD] shadow-md" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
      {navItems.map((item) => (
        <a
          href={item.url}
          class="text-white hover:text-blue-medium transition-colors p-3 rounded font-ibm-plex text-center text-lg block"
          onclick="const menu = document.getElementById('mobile-menu'); menu.classList.add('max-h-0'); menu.classList.remove('max-h-screen', 'py-4');"
        >
          {item.name}
        </a>
      ))}
    </div>
  </div>
</nav>

<script>
  const menuToggle = document.getElementById('menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');

  // Control del menú desplegable
  menuToggle?.addEventListener('click', (event) => {
    event.stopPropagation(); // Prevent click from immediately closing menu
    if (mobileMenu?.classList.contains('max-h-0')) {
      mobileMenu.classList.remove('max-h-0');
      mobileMenu.classList.add('max-h-screen', 'py-4'); // Add padding when open
    } else {
      mobileMenu?.classList.add('max-h-0');
      mobileMenu?.classList.remove('max-h-screen', 'py-4');
    }
  });

  // Cerrar menú al hacer clic en un enlace
  const mobileLinks = mobileMenu?.querySelectorAll('a');
  mobileLinks?.forEach(link => {
    link.addEventListener('click', () => {
      // The inline onclick handles this now, but we keep this structure
      // If the inline onclick were removed, this would be needed:
      // mobileMenu?.classList.add('max-h-0');
      // mobileMenu?.classList.remove('max-h-screen', 'py-4');
    });
  });

  // Cerrar menú si se hace clic fuera de él
  document.addEventListener('click', (event) => {
    const isClickInsideMenu = mobileMenu?.contains(event.target);
    const isClickOnToggle = menuToggle?.contains(event.target) || event.target === menuToggle;

    if (mobileMenu?.classList.contains('max-h-screen') && !isClickInsideMenu && !isClickOnToggle) {
       mobileMenu.classList.add('max-h-0');
       mobileMenu.classList.remove('max-h-screen', 'py-4');
    }
  });

  // No scroll effects needed as it's always fixed
</script>